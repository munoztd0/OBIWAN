geom_abline(slope= 0, intercept=50, linetype = "dashed", color = "black") +
geom_line(aes(group = condition), alpha = 0.9, size = 1) +
geom_ribbon(aes(ymin=HEDO.bt$min, ymax=HEDO.bt$max), alpha=0.2, linetype = 0 ) +
theme_bw() +
ylim(45, 80)+ # we need to set this manually to keep to comparability PAV RO
labs(
title = "Perceived Pleasure",
x = "Trial",
y = "Ratings"
)
ggplot(HEDO.bt, aes(x = trialxcondition, y = perceived_liking, fill = condition, color = condition)) +
geom_point()  +
geom_abline(slope= 0, intercept=50, linetype = "dashed", color = "black") +
geom_line(aes(group = condition), alpha = 0.9, size = 1) +
geom_ribbon(aes(ymin=HEDO.bt$min, ymax=HEDO.bt$max), alpha=0.2, linetype = 0 ) +
theme_bw() +
ylim(45, 80)+ # we need to set this manually to keep to comparability PAV RO
labs(
title = "Perceived Pleasure",
x = "Trial",
y = "Ratings"
)
ggplot(HEDO.bt, aes(x = trialxcondition, y = perceived_liking, fill = condition, color = condition)) +
geom_point()  +
geom_abline(slope= 0, intercept=50, linetype = "dashed", color = "black") +
geom_line(aes(group = condition), alpha = 0.9, size = 1) +
geom_ribbon(aes(ymin=HEDO.bt$min, ymax=HEDO.bt$max), alpha=0.2, linetype = 0 ) +
theme_bw() +
labs(
title = "Perceived Pleasure",
x = "Trial",
y = "Ratings"
)
HEDO.bt   = ddply(HEDO, .(trialxcondition, condition), summarise,  perceived_intensity = mean(perceived_intensity, na.rm = TRUE))
er   <- ddply(HEDO, .(trialxcondition,condition), summarise, perceived_intensity = sd(perceived_intensity)/sqrt(length(perceived_intensity)))
HEDO.bt$trialxcondition <- as.numeric(HEDO.bt$trialxcondition)
HEDO.bt$min = HEDO.bt$perceived_intensity - er$perceived_intensity
HEDO.bt$max  = HEDO.bt$perceived_intensity + er$perceived_intensity
pp <- ggplot(HEDO.bt, aes(x = trialxcondition, y = perceived_intensity, fill = condition, color = condition)) +
geom_point()  +
geom_abline(slope= 0, intercept=50, linetype = "dashed", color = "black") +
geom_line(aes(group = condition), alpha = 0.9, size = 1) +
geom_ribbon(aes(ymin=HEDO.bt$min, ymax=HEDO.bt$max), alpha=0.2, linetype = 0 ) +
theme_bw() +
ylim(45, 80)+
labs(
title = "Perceived Intensity",
x = "Trial",
y = "Ratings"
)
ggplot(HEDO.bt, aes(x = trialxcondition, y = perceived_intensity, fill = condition, color = condition)) +
geom_point()  +
geom_abline(slope= 0, intercept=50, linetype = "dashed", color = "black") +
geom_line(aes(group = condition), alpha = 0.9, size = 1) +
geom_ribbon(aes(ymin=HEDO.bt$min, ymax=HEDO.bt$max), alpha=0.2, linetype = 0 ) +
theme_bw() +
ylim(45, 80)+
labs(
title = "Perceived Intensity",
x = "Trial",
y = "Ratings"
)
HEDO.bt   = ddply(HEDO, .(trialxcondition, condition), summarise,  perceived_intensity = mean(perceived_intensity, na.rm = TRUE))
er   <- ddply(HEDO, .(trialxcondition,condition), summarise, perceived_intensity = sd(perceived_intensity)/sqrt(length(perceived_intensity)))
HEDO.bt$trialxcondition <- as.numeric(HEDO.bt$trialxcondition)
HEDO.bt$min = HEDO.bt$perceived_intensity - er$perceived_intensity
HEDO.bt$max  = HEDO.bt$perceived_intensity + er$perceived_intensity
pp <- ggplot(HEDO.bt, aes(x = trialxcondition, y = perceived_intensity, fill = condition, color = condition)) +
geom_point()  +
geom_abline(slope= 0, intercept=50, linetype = "dashed", color = "black") +
geom_line(aes(group = condition), alpha = 0.9, size = 1) +
geom_ribbon(aes(ymin=HEDO.bt$min, ymax=HEDO.bt$max), alpha=0.2, linetype = 0 ) +
theme_bw() +
ylim(45, 80)+
labs(
title = "Perceived Intensity",
x = "Trial",
y = "Ratings"
)
ggplot(HEDO.bt, aes(x = trialxcondition, y = perceived_intensity, fill = condition, color = condition)) +
geom_point()  +
geom_abline(slope= 0, intercept=50, linetype = "dashed", color = "black") +
geom_line(aes(group = condition), alpha = 0.9, size = 1) +
geom_ribbon(aes(ymin=HEDO.bt$min, ymax=HEDO.bt$max), alpha=0.2, linetype = 0 ) +
theme_bw() +
#ylim(45, 80)+
labs(
title = "Perceived Intensity",
x = "Trial",
y = "Ratings"
)
EDO.bt   = ddply(HEDO, .(trialxcondition, condition), summarise,  perceived_familiarity = mean(perceived_familiarity, na.rm = TRUE))
er   <- ddply(HEDO, .(trialxcondition,condition), summarise, perceived_familiarity = sd(perceived_familiarity)/sqrt(length(perceived_familiarity)))
HEDO.bt$trialxcondition <- as.numeric(HEDO.bt$trialxcondition)
HEDO.bt$min = HEDO.bt$perceived_familiarity - er$perceived_familiarity
HEDO.bt$max = HEDO.bt$perceived_familiarity + er$perceived_familiarity
pp <- ggplot(HEDO.bt, aes(x = trialxcondition, y = perceived_familiarity, fill = condition, color = condition)) +
geom_point()  +
geom_abline(slope= 0, intercept=50, linetype = "dashed", color = "black") +
geom_line(aes(group = condition), alpha = 0.9, size = 1) +
geom_ribbon(aes(ymin=HEDO.bt$min, ymax=HEDO.bt$max), alpha=0.2, linetype = 0 ) +
theme_bw() +
ylim(45, 80)+
labs(
title = "Perceived familiarity",
x = "Trial",
y = "Ratings"
)
ggplot(HEDO.bt, aes(x = trialxcondition, y = perceived_familiarity, fill = condition, color = condition)) +
geom_point()  +
geom_abline(slope= 0, intercept=50, linetype = "dashed", color = "black") +
geom_line(aes(group = condition), alpha = 0.9, size = 1) +
geom_ribbon(aes(ymin=HEDO.bt$min, ymax=HEDO.bt$max), alpha=0.2, linetype = 0 ) +
theme_bw() +
ylim(45, 80)+
labs(
title = "Perceived familiarity",
x = "Trial",
y = "Ratings"
)
HEDO.bt   = ddply(HEDO, .(trialxcondition, condition), summarise,  perceived_familiarity = mean(perceived_familiarity, na.rm = TRUE))
er   <- ddply(HEDO, .(trialxcondition,condition), summarise, perceived_familiarity = sd(perceived_familiarity)/sqrt(length(perceived_familiarity)))
HEDO.bt$trialxcondition <- as.numeric(HEDO.bt$trialxcondition)
HEDO.bt$min = HEDO.bt$perceived_familiarity - er$perceived_familiarity
HEDO.bt$max = HEDO.bt$perceived_familiarity + er$perceived_familiarity
HEDO.bt   = ddply(HEDO, .(trialxcondition, condition), summarise,  perceived_familiarity = mean(perceived_familiarity, na.rm = TRUE))
er   <- ddply(HEDO, .(trialxcondition,condition), summarise, perceived_familiarity = sd(perceived_familiarity)/sqrt(length(perceived_familiarity)))
HEDO.bt$trialxcondition <- as.numeric(HEDO.bt$trialxcondition)
HEDO.bt$min = HEDO.bt$perceived_familiarity - er$perceived_familiarity
HEDO.bt$max = HEDO.bt$perceived_familiarity + er$perceived_familiarity
pp <- ggplot(HEDO.bt, aes(x = trialxcondition, y = perceived_familiarity, fill = condition, color = condition)) +
geom_point()  +
geom_abline(slope= 0, intercept=50, linetype = "dashed", color = "black") +
geom_line(aes(group = condition), alpha = 0.9, size = 1) +
geom_ribbon(aes(ymin=HEDO.bt$min, ymax=HEDO.bt$max), alpha=0.2, linetype = 0 ) +
theme_bw() +
ylim(45, 80)+
labs(
title = "Perceived familiarity",
x = "Trial",
y = "Ratings"
)
ggplot(HEDO.bt, aes(x = trialxcondition, y = perceived_familiarity, fill = condition, color = condition)) +
geom_point()  +
geom_abline(slope= 0, intercept=50, linetype = "dashed", color = "black") +
geom_line(aes(group = condition), alpha = 0.9, size = 1) +
geom_ribbon(aes(ymin=HEDO.bt$min, ymax=HEDO.bt$max), alpha=0.2, linetype = 0 ) +
theme_bw() +
ylim(45, 80)+
labs(
title = "Perceived familiarity",
x = "Trial",
y = "Ratings"
)
<- ggplot(HEDO.bt, aes(x = trialxcondition, y = perceived_familiarity, fill = condition, color = condition)) +
geom_point()  +
geom_abline(slope= 0, intercept=50, linetype = "dashed", color = "black") +
geom_line(aes(group = condition), alpha = 0.9, size = 1) +
geom_ribbon(aes(ymin=HEDO.bt$min, ymax=HEDO.bt$max), alpha=0.2, linetype = 0 ) +
theme_bw() +
ylim(45, 78)+
labs(
title = "Perceived familiarity",
x = "Trial",
y = "Ratings"
)
ggplot(HEDO.bt, aes(x = trialxcondition, y = perceived_familiarity, fill = condition, color = condition)) +
geom_point()  +
geom_abline(slope= 0, intercept=50, linetype = "dashed", color = "black") +
geom_line(aes(group = condition), alpha = 0.9, size = 1) +
geom_ribbon(aes(ymin=HEDO.bt$min, ymax=HEDO.bt$max), alpha=0.2, linetype = 0 ) +
theme_bw() +
ylim(45, 78)+
labs(
title = "Perceived familiarity",
x = "Trial",
y = "Ratings"
)
## R code for FOR OBIWAN_PIT
# last modified on February by Eva
# -----------------------  PRELIMINARY STUFF ----------------------------------------
if(!require(pacman)) {
install.packages("pacman")
library(pacman)
}
pacman::p_load(car, lme4, lmerTest, pbkrtest, ggplot2, dplyr, plyr, tidyr, multcomp, mvoutlier, HH, doBy, psych, pastecs, reshape, reshape2,
jtools, effects, compute.es, DescTools, MBESS, afex, ez, metafor, influence.ME)
#SETUP
# Set working directory
analysis_path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(analysis_path)
figures_path  <- file.path(analysis_path, 'figures')
# open dataset
PIT     <- read.delim(file.path(analysis_path,'OBIWAN_PIT_control.txt'), header = T, sep ='') # read in dataset
HEDO    <- read.delim(file.path(analysis_path,'OBIWAN_HEDONIC_control.txt'), header = T, sep ='') # read in dataset
# define factors
HEDO$id      <- factor(HEDO$id)
HEDO$trial    <- factor(HEDO$trial)
HEDO$group    <- factor(HEDO$group)
HEDO$condition <- factor(HEDO$condition)
HEDO$trialxcondition <- factor(HEDO$trialxcondition)
# HEDO  <- subset(HEDO, id != '114')
# ------------------------------------------ Pleasure  ----------------------------------------------------------
#********************************** PLOT 1 main effect by subject
HEDO.bs = ddply(HEDO, .(id, condition), summarise, perceived_liking = mean(perceived_liking, na.rm = TRUE))
bg = ddply(HEDO.bs,.(condition),summarise, perceived_liking=mean(perceived_liking))
er   <- ddply(HEDO.bs, .(condition), summarise, perceived_liking = sd(perceived_liking)/sqrt(length(perceived_liking)))
ggplot(HEDO.bs, aes(x = condition, y = perceived_liking, fill = condition, color = condition)) +
geom_point(alpha = .5)  +
geom_bar(data =bg, stat = "identity", width=.9, position = "dodge", alpha = .5, color = NA) +
geom_errorbar(data = bg, aes(ymin = perceived_liking - er$perceived_liking, ymax = perceived_liking + er$perceived_liking), width = .1) +
geom_line(aes(group = id), alpha = .2, size = 0.5, color = "gray") +
theme_bw() +
labs(
title = "Hedonicity",
x = "Trial",
y = "Liking"
)
#***************************************** PLOT 2 main effect by trial
HEDO.bt   = ddply(HEDO, .(trialxcondition, condition), summarise,  perceived_liking = mean(perceived_liking, na.rm = TRUE))
er   <- ddply(HEDO, .(trialxcondition,condition), summarise, perceived_liking = sd(perceived_liking)/sqrt(length(perceived_liking)))
HEDO.bt$trialxcondition <- as.numeric(HEDO.bt$trialxcondition)
HEDO.bt$min = HEDO.bt$perceived_liking - er$perceived_liking
HEDO.bt$max  = HEDO.bt$perceived_liking + er$perceived_liking
pp <- ggplot(HEDO.bt, aes(x = trialxcondition, y = perceived_liking, fill = condition, color = condition)) +
geom_point()  +
geom_abline(slope= 0, intercept=50, linetype = "dashed", color = "black") +
geom_line(aes(group = condition), alpha = 0.9, size = 1) +
geom_ribbon(aes(ymin=HEDO.bt$min, ymax=HEDO.bt$max), alpha=0.2, linetype = 0 ) +
theme_bw() +
labs(
title = "Perceived Pleasure",
x = "Trial",
y = "Ratings"
)
ppp <- pp + theme_linedraw(base_size = 12, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line.y = element_line(size = 0.5, linetype = "solid", colour = "#999999"),
axis.line.x = element_line(size = 0.5, linetype = "solid", colour = "#999999"),
#legend.position="none",
legend.text  = element_text(size = 12),
#axis.ticks.x = element_blank(),
axis.text.x  = element_text(size = 12),
axis.title.x = element_text(size = 12, face = "bold", hjust = 0.5),
axis.title.y = element_text(size = 12, face = "bold", hjust = 0.5))
pdf(file.path(figures_path,'Liking_ratings_control.pdf'))
print(ppp)
dev.off()
#************************************************** test
mdl.liking = lmer(perceived_liking ~ condition*trialxcondition+(condition|id)+ (condition|trialxcondition), data = HEDO, REML=FALSE)
anova(mdl.liking)
# ------------------------------------------ Intensity ----------------------------------------------------------
#********************************* PLOT 1 main effect by subject
HEDO.bs = ddply(HEDO, .(id, condition), summarise, perceived_intensity = mean(perceived_intensity, na.rm = TRUE))
bg = ddply(HEDO.bs,.(condition),summarise, perceived_intensity=mean(perceived_intensity))
er   <- ddply(HEDO.bs, .(condition), summarise, perceived_intensity = sd(perceived_intensity)/sqrt(length(perceived_intensity)))
ggplot(HEDO.bs, aes(x = condition, y = perceived_intensity, fill = condition, color = condition)) +
geom_point(alpha = .5)  +
geom_bar(data =bg, stat = "identity", width=.9, position = "dodge", alpha = .5, color = NA) +
geom_errorbar(data = bg, aes(ymin = perceived_intensity - er$perceived_intensity, ymax = perceived_intensity + er$perceived_intensity), width = .1) +
geom_line(aes(group = id), alpha = .2, size = 0.5, color = "gray") +
theme_bw() +
labs(
title = "Intensity",
x = "Trial",
y = "Intensity"
)
#*********************************  PLOT2 main effect by trial
HEDO.bt   = ddply(HEDO, .(trialxcondition, condition), summarise,  perceived_intensity = mean(perceived_intensity, na.rm = TRUE))
er   <- ddply(HEDO, .(trialxcondition,condition), summarise, perceived_intensity = sd(perceived_intensity)/sqrt(length(perceived_intensity)))
HEDO.bt$trialxcondition <- as.numeric(HEDO.bt$trialxcondition)
HEDO.bt$min = HEDO.bt$perceived_intensity - er$perceived_intensity
HEDO.bt$max  = HEDO.bt$perceived_intensity + er$perceived_intensity
pp <- ggplot(HEDO.bt, aes(x = trialxcondition, y = perceived_intensity, fill = condition, color = condition)) +
geom_point()  +
geom_abline(slope= 0, intercept=50, linetype = "dashed", color = "black") +
geom_line(aes(group = condition), alpha = 0.9, size = 1) +
geom_ribbon(aes(ymin=HEDO.bt$min, ymax=HEDO.bt$max), alpha=0.2, linetype = 0 ) +
theme_bw() +
labs(
title = "Perceived Intensity",
x = "Trial",
y = "Ratings"
)
ppp <- pp + theme_linedraw(base_size = 12, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line.y = element_line(size = 0.5, linetype = "solid", colour = "#999999"),
axis.line.x = element_line(size = 0.5, linetype = "solid", colour = "#999999"),
#legend.position="none",
legend.text  = element_text(size = 12),
#axis.ticks.x = element_blank(),
axis.text.x  = element_text(size = 12),
axis.title.x = element_text(size = 12, face = "bold", hjust = 0.5),
axis.title.y = element_text(size = 12, face = "bold", hjust = 0.5))
pdf(file.path(figures_path,'Intensity_ratings_control.pdf'))
print(ppp)
dev.off()
#************************************************** test
mdl.intensity = lmer(perceived_intensity ~ condition*trialxcondition+(condition|id)+ (condition|trialxcondition), data = HEDO, REML=FALSE)
anova(mdl.intensity)
# ------------------------------------------ Familiarity ----------------------------------------------------------
#********************************* PLOT 1 main effect by subject
HEDO.bs = ddply(HEDO, .(id, condition), summarise, perceived_familiarity = mean(perceived_familiarity, na.rm = TRUE))
bg = ddply(HEDO.bs,.(condition),summarise, perceived_familiarity=mean(perceived_familiarity))
er   <- ddply(HEDO.bs, .(condition), summarise, perceived_familiarity = sd(perceived_familiarity)/sqrt(length(perceived_familiarity)))
ggplot(HEDO.bs, aes(x = condition, y = perceived_familiarity, fill = condition, color = condition)) +
geom_point(alpha = .5)  +
geom_bar(data =bg, stat = "identity", width=.9, position = "dodge", alpha = .5, color = NA) +
geom_errorbar(data = bg, aes(ymin = perceived_familiarity - er$perceived_familiarity, ymax = perceived_familiarity + er$perceived_familiarity), width = .1) +
geom_line(aes(group = id), alpha = .2, size = 0.5, color = "gray") +
theme_bw() +
labs(
title = "Familiarity",
x = "Trial",
y = "Familiarity"
)
#********************************* PLOT 2 main effect by trial
HEDO.bt   = ddply(HEDO, .(trialxcondition, condition), summarise,  perceived_familiarity = mean(perceived_familiarity, na.rm = TRUE))
er   <- ddply(HEDO, .(trialxcondition,condition), summarise, perceived_familiarity = sd(perceived_familiarity)/sqrt(length(perceived_familiarity)))
HEDO.bt$trialxcondition <- as.numeric(HEDO.bt$trialxcondition)
HEDO.bt$min = HEDO.bt$perceived_familiarity - er$perceived_familiarity
HEDO.bt$max = HEDO.bt$perceived_familiarity + er$perceived_familiarity
pp <- ggplot(HEDO.bt, aes(x = trialxcondition, y = perceived_familiarity, fill = condition, color = condition)) +
geom_point()  +
geom_abline(slope= 0, intercept=50, linetype = "dashed", color = "black") +
geom_line(aes(group = condition), alpha = 0.9, size = 1) +
geom_ribbon(aes(ymin=HEDO.bt$min, ymax=HEDO.bt$max), alpha=0.2, linetype = 0 ) +
theme_bw() +
ylim(45, 78)+
labs(
title = "Perceived familiarity",
x = "Trial",
y = "Ratings"
)
ppp <- pp + theme_linedraw(base_size = 12, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line.y = element_line(size = 0.5, linetype = "solid", colour = "#999999"),
axis.line.x = element_line(size = 0.5, linetype = "solid", colour = "#999999"),
#legend.position="none",
legend.text  = element_text(size = 12),
#axis.ticks.x = element_blank(),
axis.text.x  = element_text(size = 12),
axis.title.x = element_text(size = 12, face = "bold", hjust = 0.5),
axis.title.y = element_text(size = 12, face = "bold", hjust = 0.5))
pdf(file.path(figures_path,'Familiarity_ratings_control.pdf'))
print(ppp)
dev.off()
#************************************************** test
mdl.familiarity= lmer(perceived_familiarity ~ condition*trialxcondition+(condition|id)+ (condition|trialxcondition), data = HEDO, REML=FALSE)
anova(mdl.familiarity)
ggplot(HEDO.bt, aes(x = trialxcondition, y = perceived_familiarity, fill = condition, color = condition)) +
geom_point()  +
geom_abline(slope= 0, intercept=50, linetype = "dashed", color = "black") +
geom_line(aes(group = condition), alpha = 0.9, size = 1) +
geom_ribbon(aes(ymin=HEDO.bt$min, ymax=HEDO.bt$max), alpha=0.2, linetype = 0 ) +
theme_bw() +
ylim(45, 78)+
labs(
title = "Perceived familiarity",
x = "Trial",
y = "Ratings"
)
pp <- ggplot(HEDO.bt, aes(x = trialxcondition, y = perceived_familiarity, fill = condition, color = condition)) +
geom_point()  +
geom_abline(slope= 0, intercept=50, linetype = "dashed", color = "black") +
geom_line(aes(group = condition), alpha = 0.9, size = 1) +
geom_ribbon(aes(ymin=HEDO.bt$min, ymax=HEDO.bt$max), alpha=0.2, linetype = 0 ) +
theme_bw() +
ylim(45, 78)+
labs(
title = "Perceived familiarity",
x = "Trial",
y = "Ratings"
)
pp + theme_linedraw(base_size = 12, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line.y = element_line(size = 0.5, linetype = "solid", colour = "#999999"),
axis.line.x = element_line(size = 0.5, linetype = "solid", colour = "#999999"),
#legend.position="none",
legend.text  = element_text(size = 12),
#axis.ticks.x = element_blank(),
axis.text.x  = element_text(size = 12),
axis.title.x = element_text(size = 12, face = "bold", hjust = 0.5),
axis.title.y = element_text(size = 12, face = "bold", hjust = 0.5))
pp <- ggplot(HEDO.bt, aes(x = trialxcondition, y = perceived_familiarity, fill = condition, color = condition)) +
geom_point()  +
geom_abline(slope= 0, intercept=50, linetype = "dashed", color = "black") +
geom_line(aes(group = condition), alpha = 0.9, size = 1) +
geom_ribbon(aes(ymin=HEDO.bt$min, ymax=HEDO.bt$max), alpha=0.2, linetype = 0 ) +
theme_bw() +
ylim(45, 78)+
labs(
title = "Perceived familiarity",
x = "Trial",
y = "Ratings"
)
ppp <- pp + theme_linedraw(base_size = 12, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line.y = element_line(size = 0.5, linetype = "solid", colour = "#999999"),
axis.line.x = element_line(size = 0.5, linetype = "solid", colour = "#999999"),
#legend.position="none",
legend.text  = element_text(size = 12),
#axis.ticks.x = element_blank(),
axis.text.x  = element_text(size = 12),
axis.title.x = element_text(size = 12, face = "bold", hjust = 0.5),
axis.title.y = element_text(size = 12, face = "bold", hjust = 0.5))
pdf(file.path(figures_path,'Familiarity_ratings_control.pdf'))
print(ppp)
dev.off()
analysis_path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(analysis_path)
figures_path  <- file.path(analysis_path, 'figures')
figures_path
HEDO.bt   = ddply(HEDO, .(trialxcondition, condition), summarise,  perceived_familiarity = mean(perceived_familiarity, na.rm = TRUE))
er   <- ddply(HEDO, .(trialxcondition,condition), summarise, perceived_familiarity = sd(perceived_familiarity)/sqrt(length(perceived_familiarity)))
HEDO.bt$trialxcondition <- as.numeric(HEDO.bt$trialxcondition)
HEDO.bt$min = HEDO.bt$perceived_familiarity - er$perceived_familiarity
HEDO.bt$max = HEDO.bt$perceived_familiarity + er$perceived_familiarity
pp <- ggplot(HEDO.bt, aes(x = trialxcondition, y = perceived_familiarity, fill = condition, color = condition)) +
geom_point()  +
geom_abline(slope= 0, intercept=50, linetype = "dashed", color = "black") +
geom_line(aes(group = condition), alpha = 0.9, size = 1) +
geom_ribbon(aes(ymin=HEDO.bt$min, ymax=HEDO.bt$max), alpha=0.2, linetype = 0 ) +
theme_bw() +
ylim(45, 78)+
labs(
title = "Perceived familiarity",
x = "Trial",
y = "Ratings"
)
ppp <- pp + theme_linedraw(base_size = 12, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line.y = element_line(size = 0.5, linetype = "solid", colour = "#999999"),
axis.line.x = element_line(size = 0.5, linetype = "solid", colour = "#999999"),
#legend.position="none",
legend.text  = element_text(size = 12),
#axis.ticks.x = element_blank(),
axis.text.x  = element_text(size = 12),
axis.title.x = element_text(size = 12, face = "bold", hjust = 0.5),
axis.title.y = element_text(size = 12, face = "bold", hjust = 0.5))
pdf(file.path(figures_path,'Familiarity_ratings_control.pdf'))
print(ppp)
dev.off()
# -----------------------  PRELIMINARY STUFF ----------------------------------------
if(!require(pacman)) {
install.packages("pacman")
library(pacman)
}
pacman::p_load(car, lme4, lmerTest, pbkrtest, ggplot2, dplyr, plyr, tidyr, multcomp, mvoutlier, HH, doBy, psych, pastecs, reshape, reshape2,
jtools, effects, compute.es, DescTools, MBESS, afex, ez, metafor, influence.ME)
#SETUP
# Set working directory
analysis_path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(analysis_path)
# open dataset
PIT     <- read.delim(file.path(analysis_path,'OBIWAN_PIT_control.txt'), header = T, sep ='') # read in dataset
HEDO    <- read.delim(file.path(analysis_path,'OBIWAN_HEDONIC_control.txt'), header = T, sep ='') # read in dataset
# define factors
PIT$id       <- factor(PIT$id)
PIT$trial    <- factor(PIT$trial)
PIT$group    <- factor(PIT$group)
PIT$condition <- factor(PIT$condition)
PIT$trialxcondition <- factor(PIT$trialxcondition)
# CSp vs CS- constrast
PIT$CSpCSm[PIT$condition == 'CSminus'] <- -1
PIT$CSpCSm[PIT$condition== 'CSplus']  <-  1
PIT$CSpCSm[PIT$condition== 'BL']      <- 0
PIT$CSprest[PIT$condition == 'CSminus'] <- -1
PIT$CSprest[PIT$condition== 'CSplus']  <- +2
PIT$CSptest[PIT$condition== 'BL']      <- -1
# PLOTS
PIT$Condition[PIT$condition== 'CSplus']   <- 'CS+'
PIT$Condition[PIT$condition== 'CSminus']  <- 'CS-'
PIT$Condition[PIT$condition== 'BL']       <- 'Baseline'
# PLOT 1 main effect by subject
PIT.bs = ddply(PIT, .(id, condition), summarise, gripFreq = mean(gripFreq, na.rm = TRUE))
bg = ddply(PIT.bs,.(condition),summarise, gripFreq=mean(gripFreq))
er   <- ddply(PIT.bs, .(condition), summarise, gripFreq = sd(gripFreq)/sqrt(length(gripFreq)))
# -----------------------  PRELIMINARY STUFF ----------------------------------------
if(!require(pacman)) {
install.packages("pacman")
library(pacman)
}
# -----------------------  PRELIMINARY STUFF ----------------------------------------
if(!require(pacman)) {
install.packages("pacman")
library(pacman)
}
