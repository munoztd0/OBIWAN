#!/bin/sh

#   fix - main script for FIX (FMRIB's ICA-based Xnoiseifier)
#
#   Gholamreza Salimi-Khorshidi and Stephen Smith, FMRIB Analysis Group
#
#   Copyright (C) 2012-2013 University of Oxford


FSL_FIXDIR=$( cd $(dirname $0) ; pwd)
export FSL_FIXDIR
# All fix settings are held in the settings.sh file - edit this file to suit your setup
. ${FSL_FIXDIR}/settings.sh

Usage() {
    cat <<EOF

FIX (FMRIB's ICA-based Xnoiseifier) v$FIXVERSION

Simple usage, assuming training data already exists:

  fix <mel.ica> <train>.RData <thresh>  [fix -a options] 
    Extract features, classify and run cleanup - equivalent to:
      fix -f <mel.ica> ; fix -c <mel.ica> <train>.RData <thresh> ; fix -a <mel.ica>/fix4melview_<train>_<thresh>.txt [-a options]
    For the [fix -a options], see "fix -a" usage below.
    The first argument should be a FEAT/MELODIC output directory that includes a filtered_func_data.ica melodic output.
    Example:    fix study1/subject1.ica /usr/local/FIX/HCP_noHP.RData 20 -m -h 200
    Example:    fix subject2.feat /home/FIX/Standard_noHP.RData 20 -m   (ICA must have been turned on in FEAT pre-stats)

Usage for each stage separately, including creation of training data:

  fix -f <mel.ica>             
    Feature extraction (for later training and/or classifying).

  fix -t <training-output-basename> [-l] <mel1.ica> <mel2.ica> ... 
    Train classifier (Training output basename followed by list of Melodic directories).
    Every Melodic directory must contain hand_labels_noise.txt listing the artefact components, e.g.:  [1, 4, 99, ... 140].
    -l : optional LOO accuracy testing (takes a long time unless you have a cluster setup).

  fix -c <mel.ica> <training.RData> <thresh>       
    Classify ICA components (<thresh> is in the range 0-100, typically 5-20).

  fix -C <training.RData> <output> <mel1.ica> <mel2.ica> ...
    Classify components for all listed Melodic directories over a range of thresholds and produce LOO-style accuracy
      testing using existing hand classifictions.
    Every Melodic directory must contain hand_labels_noise.txt listing the artefact components, e.g.:  [1, 4, 99, ... 140].

  fix -a <mel.ica/fix4melview_TRAIN_thr.txt>  [-m [-h <highpass>]]  [-A]
    Apply cleanup, using artefacts listed in the .txt file, to the data inside the enclosing Feat/Melodic directory.
    -m : optionally also cleanup motion confounds, with highpass filtering of motion confounds controlled by:
       - if -h is omitted, fix will look to see if a design.fsf file is present, to find the highpass cutoff.
       - if -h is omitted, and no design.fsf is present, no filtering of the motion confounds will take place.
       - if -h <highpass> is set, then:
            -h -1          apply no filtering to motion confounds.
            -h 0           apply linear detrending only.
            -h <highpass>  with a positive <highpass> value, apply highpass with <highpass> being full-width (2*sigma) in seconds.
    -A : apply aggressive (full variance) cleanup, instead of the default less-aggressive (unique variance) cleanup.

  If [-t] or [-c] are fed Melodic output directories without features already extracted, [-f] will automatically be run.

Running FIX on a cluster:
  When doing classifier training and LOO (or when using the -C option), DO NOT submit fix to the cluster (with fsl_sub), because the
  many sub-jobs making up the LOO testing will automatically be submitted to the cluster for you by fix (if you have a cluster setup).
  However, for all other calls to the fix script, it is fine to submit to the cluster using fsl_sub.

EOF
    exit 1
}

#############################################################

CheckFeatures() {
  if [ ! -f $1/fix/features.csv ] ; then
    echo FIX features not already generated, so creating them now.
    ${FSL_FIXDIR}/fix -f $1
  else
    if [ ! -f $1/fix/.version ] || [ x`cat $1/fix/.version` != x$FIXVERSION ] ; then
      echo Warning: this version of FIX does not match the already-computed FIX features in ${MELOUT}/fix.
      echo You probably need to delete ${MELOUT}/fix and regenerate the FIX features.
      echo You can ignore this warning if you are trying to use v1.05 features with FIX v1.06
    fi
  fi
}

#############################################################

[ "$2" = "" ] && Usage
domot=0
loo=0
aggressive=0
while [ _$1 != _ ] ; do

    # feature extraction
    if [ $1 = -f ] ; then
        fix_mode=1
        [ "$2" = "" ] && Usage
        MELOUT=$2
        [ ! -d $MELOUT ] && echo No valid Melodic output directory specified && exit 1
        shift 2

    # train the classifier
    elif [ $1 = -t ] ; then
        fix_mode=2
        [ "$3" = "" ] && Usage
        TRAIN=`dirname $2`/`basename $2 .RData`
        shift 2
        [ $1 = -l ] && loo=1 && shift 1
        MELOUT=$*
        break

    # predict for a melodic folder
    elif [ $1 = -c ] ; then
        fix_mode=3
        [ "$4" = "" ] && Usage
        MELOUT=$2
        TRAIN=`dirname $3`/`basename $3 .RData`.RData  
        THRESH=$4
        [ ! -d $MELOUT ] && echo No valid Melodic output directory specified && exit 1
        [ ! -f $TRAIN ] && echo No valid training file specified && exit 1
        shift 4

    #
    elif [ $1 = -C ] ; then
        fix_mode=20
        [ "$4" = "" ] && Usage
        TRAIN=`dirname $2`/`basename $2 .RData`.RData
        [ ! -f $TRAIN ] && echo No valid training file specified && exit 1
        TESTOUT=$3
        shift 3
        MELOUT=$*
        break

    elif [ $1 = -a ] ; then
	fix_mode=4
        [ "$2" = "" ] && Usage
	MELOUT=$2
        [ ! -f $MELOUT ] && echo No valid labelling file specified && exit 1
	shift 2
    elif [ _$1 = _-m ] ; then
	domot=1
	shift
        if [ _$1 = _-h ] ; then
	  HP=$2
	  shift 2
        fi
    elif [ _$1 = _-A ] ; then
	aggressive=1
	shift
    else
        [ "$3" = "" ] && Usage
	MELOUT=$1
        TRAIND=`dirname $2`
        TRAIN=`basename $2 .RData`
        THRESH=$3
        shift 3
        ${FSL_FIXDIR}/fix -f $MELOUT
        ${FSL_FIXDIR}/fix -c $MELOUT $TRAIND/${TRAIN}.RData $THRESH
        ${FSL_FIXDIR}/fix -a ${MELOUT}/fix4melview_${TRAIN}_thr${THRESH}.txt $*
        exit 0
    fi
done

case $fix_mode in

  1)
    echo "FIX Feature extraction for Melodic output directory: $MELOUT"
    mkdir -p ${MELOUT}/fix
    echo $FIXVERSION > ${MELOUT}/fix/.version
    echo " create edge masks"
    ${FSL_FIXDIR}/fix_0a_create_edge_masks $MELOUT
    echo " run FAST"
    ${FSL_FIXDIR}/fix_0b_apply_fast $MELOUT
    echo " registration of standard space masks"
    ${FSL_FIXDIR}/fix_0c_reg_masks $MELOUT ${FSL_FIXDIR}
    echo " extract features"
    ${FSL_FIXDIR}/call_matlab.sh -l $MELOUT/fix/logMatlab.txt -f fix_1a_extract_features $MELOUT
    ;;

  2)
    echo "FIX Training classifier with output training file: $TRAIN and Melodic outputs list: $MELOUT"
    echo " copy true labels and features into training directory"
    /bin/rm -rf $TRAIN ${TRAIN}.RData
    mkdir -p $TRAIN; mycwd=`pwd`; cd $TRAIN; TRAIN=`pwd`; cd $mycwd
    j=1
    for i in $MELOUT ; do
      CheckFeatures $i
      jj=`zeropad $j 5`
      cp $i/hand_labels_noise.txt $TRAIN/${jj}.txt
      cp $i/fix/features.csv $TRAIN/${jj}.csv
      j=`echo "$j 1 + p" | dc -`
    done
    i=1
    while [ $i -lt 11 ] ; do
      echo " running classifier training"
      R CMD BATCH "--no-restore --no-save --args ${FSL_FIXDIR} ${TRAIN} ${TRAIN}.RData" ${FSL_FIXDIR}/fix_2a_train.R ${TRAIN}/.Rlog$i
      [ -f ${TRAIN}.RData ] && i=10000
      i=`echo "$i 1 + p" | dc -`
    done
    if [ $loo = 1 ] ; then
      echo $MELOUT > $TRAIN/.fixlist   
      echo " running LOO accuracy testing"
      LOO=${TRAIN}_LOO
      bLOO=`basename $LOO`
      /bin/rm -rf $LOO ${LOO}results; mkdir -p $LOO
      echo $MELOUT > $LOO/.fixlist
      j=1
      for f in $MELOUT ; do
        echo leaving-out: $f
        loof=`echo $MELOUT | awk '{$'$j'=""; print $0}'`
        jid=`fsl_sub -q short.q -l $LOO/$j ${FSL_FIXDIR}/fix -t $LOO/$j/$bLOO $loof`
        for d in 1 2 5 10 20 30 40 50 ; do
          jidd=`fsl_sub -j $jid -q short.q -l $LOO/${j}_$d ${FSL_FIXDIR}/fix -c $f $LOO/$j/${bLOO}.RData $d`
          if [ "$jids" = "" ] ; then
            jids="-j $jidd"
          else
            jids="${jids},$jidd"
          fi
        done
        j=`echo "$j 1 + p" | dc -`
      done
      jidf=`fsl_sub $jids -q short.q -l $LOO ${FSL_FIXDIR}/call_matlab.sh -f fix_2c_loo_results $LOO`
    fi
    ;;

  20)
    echo "FIX classifying with training file: $TRAIN and Melodic outputs list: $MELOUT"
      LOO=$TESTOUT
      /bin/rm -rf $LOO ${LOO}results; mkdir -p $LOO
      echo $MELOUT > $LOO/.fixlist
      echo `basename $TRAIN .RData` > $LOO/.train
      j=1
      for f in $MELOUT ; do
        echo testing: $f
        CheckFeatures $f
        for d in 1 2 5 10 20 30 40 50 ; do
          jidd=`fsl_sub -q short.q -l $LOO/${j}_$d ${FSL_FIXDIR}/fix -c $f $TRAIN $d`
          if [ "$jids" = "" ] ; then
            jids="-j $jidd"
          else
            jids="${jids},$jidd"
          fi
        done
        j=`echo "$j 1 + p" | dc -`
      done
      jidf=`fsl_sub $jids -q short.q -l $LOO ${FSL_FIXDIR}/call_matlab.sh -f fix_2c_loo_results $LOO`
    ;;
    
  3)
    echo "FIX Classifying components in Melodic directory: $MELOUT using training file: $TRAIN and threshold $THRESH"
    CheckFeatures $MELOUT
    R CMD BATCH "--no-restore --no-save --args ${FSL_FIXDIR} ${MELOUT} ${TRAIN} ${THRESH}" ${FSL_FIXDIR}/fix_2b_predict.R ${MELOUT}/.fix_2b_predict.log
    ;;

  4)
    echo "FIX Applying cleanup using cleanup file: $MELOUT and motion cleanup set to $domot"
    cd `dirname $MELOUT`
    MELOUT=`basename $MELOUT`
    hp=-1
    [ -f design.fsf ] && [ _`grep fmri\(temphp_yn\) design.fsf | awk '{print $3}'` = _1 ] && hp=`grep fmri\(paradigm_hp\) design.fsf | awk '{print $3}'`
    [ _$HP = _ ] && HP=$hp
    tail -n 1 $MELOUT | sed 's/\[//g' | sed 's/\]//g' | sed 's/,//g' > .fix
    ${FSL_FIXDIR}/call_matlab.sh -l .fix.log -f fix_3_clean .fix $aggressive $domot $HP
    ;;

esac

